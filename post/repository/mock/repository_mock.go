// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	post "github.com/andream16/easy-lazy-tests/post"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockRepositorer is a mock of Repositorer interface
type MockRepositorer struct {
	ctrl     *gomock.Controller
	recorder *MockRepositorerMockRecorder
}

// MockRepositorerMockRecorder is the mock recorder for MockRepositorer
type MockRepositorerMockRecorder struct {
	mock *MockRepositorer
}

// NewMockRepositorer creates a new mock instance
func NewMockRepositorer(ctrl *gomock.Controller) *MockRepositorer {
	mock := &MockRepositorer{ctrl: ctrl}
	mock.recorder = &MockRepositorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositorer) EXPECT() *MockRepositorerMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockRepositorer) Insert(arg0 post.Post) error {
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockRepositorerMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepositorer)(nil).Insert), arg0)
}

// Find mocks base method
func (m *MockRepositorer) Find(arg0 uuid.UUID) (*post.Post, error) {
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockRepositorerMockRecorder) Find(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepositorer)(nil).Find), arg0)
}
